# 7.  Программа получила на вход данные, это список кортежей: [(имя, дата_рождения), (имя, дата_рождения),(....)] , где имя и дата рождения — это строки.
# Доработайте функцию так, чтобы она возвращала строку:
#     <имя>, до твоего дня рождения осталось дней: <дней_до_дня_рождения>

# После функции допишите код, чтобы он:
#     перебрал полученный список с данными;
#     для каждого кортежа в списке вызвал функцию get_days_to_birthday() и передал в неё аргументы: имя и дату рождения из кортежа;
#     напечатал результат вызова.

# Примерный алгоритм выполнения задания
#     Дата рождения передаётся в программу в нестандартном для объектов date формате — 31.01.2021 вместо 2021-01-31.
#     Чтобы из такой даты создать объект типа date — нужно «объяснить» программе формат, в котором пришла дата.
#     В переменной FORMAT опишите структуру строки, в которой получена дата. Коды  форматов даты и примеры можно найти в документации.
#     В функцию get_days_to_birthday() нужно добавить второй параметр, в него будет передаваться имя.
#     Создайте объект date из полученной даты. Это делается в два этапа:
#         С помощью метода strptime() и переменной FORMAT строка с датой преобразуется в объект datetime.
#         Методом date() объект datetime преобразуется в объект date.
#     После этого преобразования должен следовать код, который вычисляет количество дней, оставшихся до дня рождения — этот фрагмент программы у вас уже есть.
#     Измените возвращаемое значение. Чтобы вернуть нужную фразу — используйте f-строку.

# Подсказка
# Если бы строка содержала дату в формате '2021/04/12', код для переменной FORMAT был бы таким: '%Y/%m/%d':
#     %Y — год,
#     %m — месяц,
#     %d — день.
# Чтобы из строки получить объект типа datetime — примените метод strptime():
#     dt.datetime.strptime(входная_строка, код_формата_даты).
# Объект datetime преобразуйте в объект date: datetime.date().
# Для перебора значений входящего списка примените цикл.
# В цикле распакуйте каждый кортеж и передайте полученные значения аргументами в вызов функции get_days_to_birthday().

import datetime as dt

# В эту переменную запишите формат для
# преобразования даты
FORMAT = "%d.%m.%Y"


# Добавьте в объявление функции ещё один параметр - имя
def get_days_to_birthday(name, date_birthday):
    # Преобразуйте полученную строку с датой в объект нужного типа
    date_birthday = dt.datetime.strptime(date_birthday, FORMAT).date()

    today = dt.date.today()
    today_year = today.year
    date_birthday = date_birthday.replace(year=today_year)

    if date_birthday > today:
        days_to_birthday = date_birthday.replace(year=today_year) - today
    else:
        date_birthday = date_birthday.replace(year=today_year + 1)
        days_to_birthday = date_birthday - today

    # Возвращаем строку в нужном формате
    return f"{name}, до твоего дня рождения осталось дней: {days_to_birthday.days}"


birthdays = [("Лера", "16.05.2015"), ("Максим", "16.12.2011"), ("Толя", "12.06.2016")]


# Напечатайте результат вызова функции get_days_to_birthday()
# для каждой пары из списка birthdays
# Перебираем список и выводим результаты
for name, date_birthday in birthdays:
    print(get_days_to_birthday(name, date_birthday))
